[gd_scene load_steps=17 format=2]

[ext_resource path="res://Paddle/Paddle.gd" type="Script" id=1]
[ext_resource path="res://Assets/paddleRed.png" type="Texture" id=2]
[ext_resource path="res://Assets/paddleBlu.png" type="Texture" id=3]
[ext_resource path="res://Assets/confetti.png" type="Texture" id=4]
[ext_resource path="res://Assets/mouth.png" type="Texture" id=5]
[ext_resource path="res://Assets/eye.png" type="Texture" id=6]
[ext_resource path="res://Assets/pupil.png" type="Texture" id=7]

[sub_resource type="RectangleShape2D" id=1]
extents = Vector2( 50, 10 )

[sub_resource type="Curve" id=2]
_data = [ Vector2( 0.00115808, 1 ), 0.0, 0.0, 0, 0, Vector2( 1, 0.238739 ), 0.0, 0.0, 0, 0 ]

[sub_resource type="Gradient" id=3]
offsets = PoolRealArray( 0, 0.237215, 1 )
colors = PoolColorArray( 1, 1, 1, 1, 1, 1, 1, 0.763401, 1, 1, 1, 0 )

[sub_resource type="Shader" id=4]
code = "// BoTW Toon Shader by NekotoArts
// wrote this at 2AM
//
//
//
// England is my city
// Smoke trees
// Two to the One from the One to the Three
shader_type spatial;
render_mode diffuse_toon, specular_toon;

uniform vec4 tint : hint_color;
uniform sampler2D albedo_texture : hint_albedo;
uniform float metallic : hint_range(0.0, 1.0) = 0.0;
uniform sampler2D normal_map : hint_albedo;
uniform float shadow_size = 0.045;
uniform float shadow_blend = 0.001;
uniform float shadow_extra_intensity = 0.0;
uniform vec4 shadow_color : hint_color;
uniform vec4 light_tint : hint_color;
uniform float rimlight_size = 0.921;
uniform float rimlight_blend = 0.01;
uniform vec4 rimlight_color : hint_color;
uniform bool use_normalmap = true;
uniform bool animated = true;
uniform float time_scale = 0.02;
uniform vec3 normal_bias = vec3(0.0);
uniform vec3 light_bias = vec3(0.0);
uniform bool use_view = true;
uniform vec4 view_bias : hint_color = vec4(1.0, 0.0, 1.0, 1.0);
uniform float view_multiplier : hint_range(-1.0, 1.0) = -1.0;

float fresnel(float amount, vec3 normal, vec3 view)
{
	return pow((1.0 - clamp(dot(normalize(normal), normalize(view)), 0.0, 1.0 )), amount);
}

varying vec3 vertex_normal;
varying vec3 vertex_tangent;

void vertex(){
	vertex_normal = NORMAL;
	vertex_normal = TANGENT;
}

void fragment(){
	ALBEDO = texture(albedo_texture, UV).rgb * tint.rgb;
	METALLIC = metallic;
}

void light(){
	vec3 normal;
	if (use_normalmap){
		vec3 normal_from_texture;
		if (animated){
			normal_from_texture = texture(normal_map, UV + TIME * time_scale).rgb;
		}else{
			normal_from_texture = texture(normal_map, UV).rgb;
		}
		normal = vec3(normal_from_texture.x * NORMAL.x,
		normal_from_texture.y * NORMAL.y, normal_from_texture.z);
		
		normal = NORMAL - normal_from_texture;
	}else{
		normal = NORMAL;
	}
	
	if (use_view){
		normal -= VIEW * view_bias.rgb * view_multiplier;
	}
	
	float NdotL = dot(normal + normal_bias, LIGHT + light_bias);
	
	float rounded = smoothstep(shadow_size, shadow_blend + shadow_size, NdotL);
	float one_minus = 1.0 - rounded;
	vec3 mult1 = LIGHT_COLOR * rounded * light_tint.rgb * ATTENUATION;
	vec3 mult2 = (one_minus * 1.4 * shadow_color.rgb) - shadow_extra_intensity;
	vec3 add1 = mult1 + mult2;
	
	float add3  = rimlight_blend + rimlight_size;
	float basic_fresnel = fresnel(1.0, NORMAL, VIEW);
	float smoothed = smoothstep(rimlight_size, add3, basic_fresnel);
	
	vec3 add2 = add1 + smoothed * rimlight_color.rgb;
	DIFFUSE_LIGHT += ALBEDO * add2;
}
"

[sub_resource type="OpenSimplexNoise" id=6]
octaves = 6

[sub_resource type="NoiseTexture" id=7]
seamless = true
as_normalmap = true
noise = SubResource( 6 )

[sub_resource type="ShaderMaterial" id=5]
shader = SubResource( 4 )
shader_param/tint = null
shader_param/metallic = 0.0
shader_param/shadow_size = 0.045
shader_param/shadow_blend = 0.001
shader_param/shadow_extra_intensity = 0.0
shader_param/shadow_color = null
shader_param/light_tint = Color( 1, 1, 1, 1 )
shader_param/rimlight_size = 0.921
shader_param/rimlight_blend = 0.01
shader_param/rimlight_color = Color( 1, 1, 1, 1 )
shader_param/use_normalmap = true
shader_param/animated = true
shader_param/time_scale = 0.02
shader_param/normal_bias = Vector3( 0, 0, 0 )
shader_param/light_bias = Vector3( 0, 0, 0 )
shader_param/use_view = true
shader_param/view_bias = Color( 1, 0, 1, 1 )
shader_param/view_multiplier = -1.0
shader_param/normal_map = SubResource( 7 )

[sub_resource type="OpenSimplexNoise" id=8]
octaves = 6

[sub_resource type="NoiseTexture" id=9]
seamless = true
as_normalmap = true
noise = SubResource( 8 )

[node name="Paddle" type="KinematicBody2D"]
script = ExtResource( 1 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
position = Vector2( 50, 10 )
shape = SubResource( 1 )

[node name="Confetti" type="CPUParticles2D" parent="."]
position = Vector2( 50, -10 )
emitting = false
lifetime = 0.5
one_shot = true
explosiveness = 0.8
randomness = 1.0
local_coords = false
texture = ExtResource( 4 )
direction = Vector2( 0, -1 )
spread = 35.0
initial_velocity = 300.0
initial_velocity_random = 0.6
angular_velocity = 800.0
angular_velocity_random = 1.0
scale_amount_curve = SubResource( 2 )
color_ramp = SubResource( 3 )
hue_variation = 1.0
hue_variation_random = 1.0

[node name="Tween" type="Tween" parent="."]

[node name="Images" type="Node2D" parent="."]

[node name="Sprite" type="Sprite" parent="Images"]
material = SubResource( 5 )
position = Vector2( 50, 10 )
texture = ExtResource( 2 )
normal_map = SubResource( 9 )

[node name="Highlight" type="Sprite" parent="Images"]
modulate = Color( 1, 1, 1, 0 )
position = Vector2( 50, 10 )
texture = ExtResource( 3 )

[node name="Eye1" type="Sprite" parent="."]
position = Vector2( 23, -7 )
texture = ExtResource( 6 )

[node name="Pupil" type="Node2D" parent="Eye1"]

[node name="Sprite" type="Sprite" parent="Eye1/Pupil"]
texture = ExtResource( 7 )

[node name="Eye2" type="Sprite" parent="."]
position = Vector2( 73, -7 )
texture = ExtResource( 6 )

[node name="Pupil" type="Node2D" parent="Eye2"]

[node name="Sprite" type="Sprite" parent="Eye2/Pupil"]
texture = ExtResource( 7 )

[node name="Mouth" type="Sprite" parent="."]
position = Vector2( 49, 26 )
texture = ExtResource( 5 )
